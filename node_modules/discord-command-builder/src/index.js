const { ModalBuilder, ActionRowBuilder, AttachmentBuilder, TextInputBuilder, TextInputStyle, ButtonStyle, EmbedBuilder, ButtonBuilder} = require('discord.js');
const FileMaker = require('file-maker');

async function createBuilder(options = {}) {

    if (!options.interaction) throw new TypeError("Couldn't create your builder! You must specify a valid interaction (interaction: interaction).");
    if (!options.path) throw new TypeError("Couldn't create your builder! You must specify your path (path: ../test).");

    let interaction = options.interaction;

    let embeds = [];
    let content = '';
    let commandephemeral = false;
    let details = {};

    let tempembeds = [];

    const embedbutton = new ButtonBuilder()
    .setLabel('• Add Embeds (0/10)')
    .setCustomId('addembed')
    .setStyle(ButtonStyle.Secondary)

    const contentbutton = new ButtonBuilder()
    .setLabel('* Add Content')
    .setCustomId('editcontent')
    .setStyle(ButtonStyle.Secondary)

    const ephemeraltoggle = new ButtonBuilder()
    .setLabel('• Ephemeral (false)')
    .setCustomId('ephemeraltoggle')
    .setStyle(ButtonStyle.Danger)

    const commanddetails = new ButtonBuilder()
    .setLabel('* Details')
    .setCustomId('commanddetails')
    .setStyle(ButtonStyle.Secondary)

    const finalize = new ButtonBuilder()
    .setLabel('• Finalize & Compile Command')
    .setCustomId('finalizecommand')
    .setDisabled(true)
    .setStyle(ButtonStyle.Secondary)

    const buttons = new ActionRowBuilder()
    .addComponents(commanddetails, embedbutton, contentbutton, ephemeraltoggle)

    const finalbuttons = new ActionRowBuilder()
    .addComponents(finalize)

    const msg = await interaction.reply({ content: `**Customize** your command **bellow!**`, components: [buttons, finalbuttons] })
    const collector = await msg.createMessageComponentCollector();

    collector.on('collect', async i => {

        if (i.user.id !== interaction.user.id) return await i.reply({ content: `You **cannot** use this menu!`, ephemeral: true });

        if (embeds) {
            if (embeds.length >= 10) {
                return await i.reply({ content: `You have **reached** your embed limit!`, ephemeral: true })
            }
        }

        if (i.customId === 'addembed') {
            
            const addembedmodal = new ModalBuilder()
            .setTitle('• Add an Embed')
            .setCustomId('addembedmodal')

            const embedname = new TextInputBuilder()
            .setCustomId('embedname')
            .setRequired(true)
            .setLabel('• Embed Name')
            .setPlaceholder(`Specified text will be your embed's name.`)
            .setMinLength(1)
            .setMaxLength(256)
            .setStyle(TextInputStyle.Short);

            const embedhex = new TextInputBuilder()
            .setCustomId('embedhex')
            .setRequired(false)
            .setLabel('• Embed Color')
            .setPlaceholder(`Specified color will be your embed's hex color.`)
            .setMinLength(1)
            .setMaxLength(10)
            .setStyle(TextInputStyle.Short);

            const embeddesc = new TextInputBuilder()
            .setCustomId('embeddesc')
            .setRequired(true)
            .setLabel('• Embed Description')
            .setPlaceholder(`Specified text will be your embed's description.`)
            .setMinLength(1)
            .setMaxLength(4000)
            .setStyle(TextInputStyle.Paragraph);

            const embedimage = new TextInputBuilder()
            .setCustomId('embedimage')
            .setRequired(false)
            .setLabel('• Embed Image')
            .setPlaceholder(`Specified URL will be your embed's image.`)
            .setMinLength(1)
            .setMaxLength(500)
            .setStyle(TextInputStyle.Short);

            const embedthumbnail = new TextInputBuilder()
            .setCustomId('embedthumbnail')
            .setRequired(false)
            .setLabel('• Embed Thumbnail')
            .setPlaceholder(`Specified URL will be your embed's thumbnail.`)
            .setMinLength(1)
            .setMaxLength(500)
            .setStyle(TextInputStyle.Short);

            const row1 = new ActionRowBuilder().addComponents(embedname)
            const row2 = new ActionRowBuilder().addComponents(embedhex)
            const row3 = new ActionRowBuilder().addComponents(embeddesc)
            const row4 = new ActionRowBuilder().addComponents(embedimage)
            const row5 = new ActionRowBuilder().addComponents(embedthumbnail)

            addembedmodal.addComponents(row1, row2, row3, row4, row5)
            await i.showModal(addembedmodal)

            const submitted = await i.awaitModalSubmit({
                time: 600000,
                filter: i => i.user.id === interaction.user.id,
            }).catch(error => {
                return null
            })

            if (submitted) {

                try {

                    const embedname = await submitted.fields.getTextInputValue('embedname');
                    const embedhex = await submitted.fields.getTextInputValue('embedhex') || null;
                    const embeddesc = await submitted.fields.getTextInputValue('embeddesc');
                    const embedimage = await submitted.fields.getTextInputValue('embedimage') || null;
                    const embedthumbnail = await submitted.fields.getTextInputValue('embedthumbnail') || null;

                    if (embeds) {
                        if (embeds.length >= 10) {
                            return await submitted.reply({ content: `You have **reached** your embed limit!`, ephemeral: true })
                        }
                    }

                    const tempoembed = new EmbedBuilder()
                    .setTitle(embedname)
                    .setDescription(embeddesc)

                    if (embedhex) {
                        tempoembed.setColor(embedhex)
                    }

                    if (embedimage) {
                        tempoembed.setImage(embedimage)
                    }

                    if (embedthumbnail) {
                        tempoembed.setThumbnail(embedthumbnail)
                    }

                    await tempembeds.push(tempoembed)

                    await submitted.reply({ content: `**Embed Added** \n\n> **Title**: ${embedname}\n> **Color**: ${embedhex || 'Default'}\n> **Embed Description**: ${embeddesc}\n> **Embed Image**: ${embedimage || 'None'}\n> **Embed Thumbnail**: ${embedthumbnail || 'None'}`, ephemeral: true });
                    embeds.push({ name: embedname, color: embedhex, description: embeddesc, image: embedimage, thumbnail: embedthumbnail });
                    
                    if (embeds) {
                        if (embeds.length > 9) {
                            embedbutton.setLabel(`• Add Embeds (10/10)`).setDisabled(true)
                        } else {
                            embedbutton.setLabel(`• Add Embeds (${embeds.length || 0}/10)`)
                        }
                    }
                    
                    await msg.edit({ components: [buttons, finalbuttons], embeds: tempembeds })

                } catch {
                    
                }
            }

        }

        if (i.customId === 'ephemeraltoggle') {

            if (commandephemeral === false || !commandephemeral) {
                commandephemeral = true
                ephemeraltoggle.setStyle(ButtonStyle.Success).setLabel('• Ephemeral (true)')
            } else {
                commandephemeral = false
                ephemeraltoggle.setStyle(ButtonStyle.Danger).setLabel('• Ephemeral (false)')
            }

            await i.reply({ content: `**Toggled** ephemeral to **${commandephemeral}**!`, ephemeral: true })
            await msg.edit({ components: [buttons, finalbuttons] })

        }

        if (i.customId === 'editcontent') {

            const contentmodal = new ModalBuilder()
            .setTitle('• Edit Content')
            .setCustomId('contentmodal')

            const contentfield = new TextInputBuilder()
            .setCustomId('contentfield')
            .setRequired(false)
            .setLabel('• Command Content')
            .setPlaceholder(`Edit the message your bot will reply with. Leave empty for none.`)
            .setMinLength(1)
            .setMaxLength(4000)
            .setStyle(TextInputStyle.Paragraph);

            contentmodal.addComponents(new ActionRowBuilder().addComponents(contentfield));
            await i.showModal(contentmodal)

            const submitted = await i.awaitModalSubmit({
                time: 600000,
                filter: i => i.user.id === interaction.user.id,
            }).catch(error => {
                return null
            })

            if (submitted) {

                try {

                    const newcontent = await submitted.fields.getTextInputValue('contentfield') || null;

                    content = newcontent;
                    await submitted.reply({ content: `**Content** edited to: \n\n> ${newcontent || '**None**'}`, ephemeral: true });
                    contentbutton.setStyle(ButtonStyle.Primary).setLabel('• Edit Content');

                    if (details !== {} && details && details.name) {
                        finalize.setDisabled(false)
                        await msg.edit({ components: [buttons, finalbuttons], content: `**Customize** your command **bellow!**\n\n${newcontent}` })
                    } else {
                        await msg.edit({ components: [buttons, finalbuttons], content: `**Customize** your command **bellow!**\n\n${newcontent}` })
                    }

                } catch {
                    
                }
            }

        }

        if (i.customId === 'commanddetails') {

            const detailsmodal = new ModalBuilder()
            .setTitle('• Command Details')
            .setCustomId('detailsmodal')

            const commandname = new TextInputBuilder()
            .setCustomId('commandname')
            .setRequired(true)
            .setLabel('• Command Name')
            .setPlaceholder(`Specified text will be your command's name.`)
            .setMinLength(1)
            .setMaxLength(30)
            .setStyle(TextInputStyle.Short);

            const commanddescription = new TextInputBuilder()
            .setCustomId('commanddescription')
            .setRequired(false)
            .setLabel('• Command Description')
            .setPlaceholder(`Specified text will be your command's description.`)
            .setMinLength(1)
            .setMaxLength(100)
            .setStyle(TextInputStyle.Short);

            detailsmodal.addComponents(new ActionRowBuilder().addComponents(commandname), new ActionRowBuilder().addComponents(commanddescription));
            await i.showModal(detailsmodal);

            const submitted = await i.awaitModalSubmit({
                time: 600000,
                filter: i => i.user.id === interaction.user.id,
            }).catch(error => {
                return null
            })

            if (submitted) {

                try {

                    const commandname = await submitted.fields.getTextInputValue('commandname');
                    const commanddesc = await submitted.fields.getTextInputValue('commanddescription') || null;

                    details = { name: commandname, description: commanddesc };

                    await submitted.reply({ content: `**Command details** edited to: \n\n> **Command Name:** ${commandname}\n> **Command Description:** ${commanddesc || 'None'}`, ephemeral: true });
                    commanddetails.setStyle(ButtonStyle.Primary).setLabel('• Edit Details');

                    if (content !== '' && content) {
                        finalize.setDisabled(false)
                        await msg.edit({ components: [buttons, finalbuttons] })
                    } else {
                        await msg.edit({ components: [buttons, finalbuttons] })
                    }

                } catch {
                    
                }
            }
        }

        if (i.customId === 'finalizecommand') {

            const finalembeds = [];
            await embeds.forEach(async embed => {

                let message = `new EmbedBuilder().setDescription("${embed.description}").setTitle("${embed.name}")`;

                if (embed.color) {
                    message += `.setColor("${embed.color}")`
                }

                if (embed.image) {
                    message += `.setImage("${embed.image}")`
                }

                if (embed.thumbnail) {
                    message += `.setThumbnail("${embed.thumbnail}")`
                }

                finalembeds.push(message)

            })

            let commnad = new FileMaker({
                header: 'const { TextInputBuilder, TextInputStyle, Events, EmbedBuilder, ActionRowBuilder, SlashCommandBuilder, ButtonBuilder, ButtonStyle, ChannelType, PermissionsBitField, ModalBuilder } = require(`discord.js`);',
                commentPattern: '//',
                footer: '// Generated by PixelVal!'
            });

            let path = `${options.path}/command-${interaction.user.id}-${details.name}.js`
            
            await commnad.writeNewSection('Command Code');

            if (!finalembeds || finalembeds === [] || !finalembeds.length) {
                await commnad.writeLine(`module.exports = {\n  data: new SlashCommandBuilder()\n  .setName('${details.name}')\n  .setDescription('${details.description}')\n  .setDMPermission(false),\n  async execute(interaction) {\n\n    const finalembeds = [];\n   interaction.reply({ content: "${content || ''}", ephemeral: ${commandephemeral} })\n\n  }\n}`);
            } else {
                await commnad.writeLine(`module.exports = {\n  data: new SlashCommandBuilder()\n  .setName('${details.name}')\n  .setDescription('${details.description}')\n  .setDMPermission(false),\n  async execute(interaction) {\n\n    const finalembeds = [${finalembeds.join(', ')}];\n   interaction.reply({ content: "${content || ''}", embeds: [finalembeds], ephemeral: ${commandephemeral} })\n\n  }\n}`);
            }
                
            await commnad.saveTo(`${path}`);

            const file = new AttachmentBuilder(path, { name: `${details.name}.js` });
            await msg.edit({ files: [file], content: `Here is your **Advanced Command**!`, embeds: [], components: [] })

        }
    })
}

module.exports = createBuilder